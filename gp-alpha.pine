// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © chanphillip6152

//@version=5
strategy("GP Testing Strategy", overlay=true, initial_capital=10000, default_qty_type=strategy.percent_of_equity, default_qty_value=100, commission_type=strategy.commission.cash_per_contract, commission_value=0.005)

f_isLastBar() =>
    var int sessionDuration = na
    var int sessionCalculatedLastBarTime = na

    t = time("1440", session = session.regular) // Resolution of 1440 = 60*24 minutes in a whole day

    // Calculate regular session duration for the symbol using very first day of the Bar Set
    if na(sessionDuration) and (na(t[1]) and not na(t) or t[1] < t)
        sessionDuration := (time[1] - t[1])

    // Calculate time of the session's last bar by adding session duration to the time of the first bar of the session
    // This does not correctly handle early close of exchange on or ahead of public holiday
    // This will also not work correctly in realtime on the very first day of a new symbol listing on an Exchange
    if na(t[1]) and not na(t) or t[1] < t
        sessionCalculatedLastBarTime := t[0] + sessionDuration

    // Return true if current bar's time == session's calculated last bar time otherwise return false
    time[0] == sessionCalculatedLastBarTime

i_ma1 = input.int(title="EMA 1 Length", defval=5, step=1, group="Strategy Parameters", tooltip="Short-term EMA")
i_ma2 = input.int(title="EMA 2 Length", defval=20, step=1, group="Strategy Parameters", tooltip="Long-term EMA")
i_volumeMa = input.int(title="Volume EMA Length", defval=20, step=1, group="Strategy Parameters", tooltip="Volume EMA")
i_buyVolume = input.float(title="Buy Volume %", defval=80, step=0.5, group="Strategy Parameters", tooltip="Volume Condition to Buy (% Volume EMA)")
i_acceptableLossPercent = input.float(title="Acceptable Loss %", defval=0, step=0.5, group="Strategy Parameters", tooltip="Acceptable Loss Percent (only sell when loss more than this)")
i_stopPercent = input.float(title="Stop Loss %", defval=10, step=0.5, group="Strategy Parameters", tooltip="Failsafe Stop Loss Percent Decline")
i_profitPercent = input.float(title="Stop Profit %", defval=10, step=0.5, group="Strategy Parameters", tooltip="Stop Profit Percent")
i_buyCross3Up = input.int(title="Buy if N cont up when crossing", defval=0, step=1, group="Strategy Parameters", tooltip="Only Buy if N continuous up when EMA1 > EMA2")
i_skipTradingOpenMinute = input.float(title="Skip Buying Open Minute", defval=0, step=1, group="Strategy Parameters", tooltip="Skip Buying within certain minutes after Market Open (only available before daily view)")
i_skipBuyLastBar = input.bool(title="Skip Buying at the Last Bar", defval=false, group="Strategy Parameters", tooltip="Skip Buying at the Last Bar, right before Market Close (only available before daily view)")

i_startTime = input.time(title="Start Filter", defval=timestamp("01 Jan 1990 00:00 +0000"), group="Time Filter", tooltip="Start Date")
i_endTime = input.time(title="End Filter", defval=timestamp("01 Jan 2099 00:00 +0000"), group="Time Filter", tooltip="End Date")

ma1 = ta.ema(close, i_ma1)
ma2 = ta.ema(close, i_ma2)

f_dateFilter = time >= i_startTime and time <= i_endTime

// check buy/sell condition
var float buyPrice = 0
volumeMA = ta.ema(volume, i_volumeMa)
acceptableStopPrice = strategy.position_size > 0 ? buyPrice - (buyPrice * i_acceptableLossPercent / 100) : na
buyCondition = ma1 > ma2 and volume > volumeMA * i_buyVolume / 100
               and strategy.position_size == 0 and f_dateFilter
sellCondition = strategy.position_size > 0 and ma1 < ma2 and (close > buyPrice or close < acceptableStopPrice)
stopDistance = strategy.position_size > 0 ? ((buyPrice - close) / close) : na
stopCondition = strategy.position_size > 0 and stopDistance > i_stopPercent / 100

// buy only if market open after certain minuites
var marketOpenTime = 0
minuteAfterOpen = 0
isWithinDay = timeframe.isseconds or timeframe.isminutes
if isWithinDay
    if session.isfirstbar
        marketOpenTime := time

    minuteAfterOpen := (time - marketOpenTime) / 60 / 1000

skipBuying = isWithinDay and (minuteAfterOpen < i_skipTradingOpenMinute or (i_skipBuyLastBar and f_isLastBar() and barstate.isconfirmed))
if skipBuying
    buyCondition := false

bgcolor(skipBuying ? color.rgb(80, 0, 0, 75) : na, title="Skip Trading Time")

// buy only if N cont up when crossing
if i_buyCross3Up > 0
    crossover = ta.crossover(ma1, ma2)
    isAllUp = true
    isCrossingOver = false
    for i = 0 to i_buyCross3Up - 1
        isAllUp := isAllUp and close[i] > open[i]
        isCrossingOver := isCrossingOver or crossover[i]

    if not isAllUp or not isCrossingOver
        buyCondition := false

// enter positions
if buyCondition
    strategy.entry(id="Long", direction=strategy.long)
    buyPrice := close

stopPrice = buyCondition or strategy.position_size > 0 ? buyPrice - (buyPrice * i_stopPercent / 100) : na
profitPrice = buyCondition or strategy.position_size > 0 ? buyPrice + (buyPrice * i_profitPercent / 100) : na

if buyCondition
    strategy.exit(id="Long", comment_loss="Stop Loss", comment_profit="Stop Profit", stop=stopPrice, limit=profitPrice)

// exit positions
if strategy.position_size > 0 and sellCondition
    strategy.close(id="Long", comment="Exit")
    strategy.cancel(id="Long")
    buyPrice := na

// draw
plot(buyPrice, color=color.maroon, style=plot.style_linebr, title="Buy Price")
plot(stopPrice, color=color.red, style=plot.style_linebr, title="Failsafe Price")
plot(profitPrice, color=color.lime, style=plot.style_linebr, title="Profit Price")
plot(acceptableStopPrice, color=color.purple, style=plot.style_linebr, title="Acceptable Price")
plot(ma1, color=color.blue, title="Short-term EMA")
plot(ma2, color=color.orange, title="Long-term EMA")

bgcolor(strategy.position_size > 0 ? color.rgb(80, 80, 80, 50) : na, title="Long")

// alert to buy
if strategy.position_size == 0 and buyCondition
    alert("Can Buy", freq=alert.freq_once_per_bar_close)

if strategy.position_size > 0 and (sellCondition or stopCondition)
    alert("Can Sell", freq=alert.freq_once_per_bar_close)
